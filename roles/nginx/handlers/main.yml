- name: Stop Nginx
  listen: "stop nginx"
  when: procedure.stdout in ['stop', 'reset', 'destroy']
  notify:
    - "configure nginx"
    - "clean nginx"
    - "remove nginx"
  docker_container:
    name: nginx
    state: absent

- name: Pull Nginx
  listen: "pull nginx"
  when: procedure.stdout in ['pull', 'create']
  notify:
    - "persist nginx"
    - "configure nginx"
  docker_image:
    name: nginx
    tag: 1.15

- name: Persist Nginx
  listen: "persist nginx"
  docker_volume:
    name: assets

- name: Configure Nginx
  listen: "configure nginx"
  when: procedure.stdout in ['configure', 'create', 'reset']
  changed_when: true
  notify: "start nginx"
  synchronize:
    src: '{{ inventory_dir }}/roles/nginx/files/'
    dest: ~/nginx
    existing_only: false
    private_key: ~/.ssh/id_rsa

- name: Clean Nginx
  listen: "clean nginx"
  when: procedure.stdout in ['clean', 'destroy']
  docker_volume:
    name: assets
    state: absent

- name: Remove Nginx
  listen: "remove nginx"
  when: procedure.stdout in ['remove', 'destroy']
  docker_image:
    name: nginx
    tag: 1.15
    state: absent

- name: Start Nginx
  listen: "start nginx"
  when: procedure.stdout in ['start', 'create', 'reset']
  docker_container:
    name: nginx
    image: nginx:1.11.6
    network_mode: host
    hostname: nginx
    ports:
      - 80:80
      - 443:443
    restart_policy: on-failure
    volumes:
      - /home/ubuntu/nginx/conf.d/:/etc/nginx/conf.d/
      - /home/ubuntu/nginx/nginx.production.conf:/etc/nginx/nginx.conf
      - /home/ubuntu/nginx/html/:/etc/nginx/html/
      - /home/ubuntu/nginx/dhparam-2048.pem:/etc/ssl/certs/dhparam-2048.pem
      - /home/ubuntu/certbot/html/:/data/letsencrypt
      - certbot-etc:/etc/letsencrypt/
      - assets:/var/www/assets/
    log_driver: awslogs
    log_options:
      awslogs-region: us-west-2
      awslogs-group: datapunnet
      awslogs-stream: nginx
